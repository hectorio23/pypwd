# Author: Héctor Adán
# https://github.com/hectorio23
# Test file for check the passwords
import argparse
import string
import random

parser = argparse.ArgumentParser(
    prog="Test for PYPWD",
    description="This is a program for test PYPWD",
    epilog="Just a tester, use faster!"
)

parser.add_argument("-p", "--password", help="The password generated by PYPWD", type=str, dest="password_user", default=None)
data = parser.parse_args()

class Generator:
    ''' Generator

    This is the class who generates the passwords and return new one
    for that you can access to `generate` method.

    '''
    def __init__(self, length=10):
        self.length = length

    # the main method, makes the perfect password
    @property
    def generate(self, length_password=0) -> str:
        if length_password == 0:
            length_password = self.length
        
        num_symbols = length_password // 3
        num_letters = (length_password - num_symbols) // 2
        
        words = list(string.ascii_lowercase + string.ascii_uppercase)
        symbols = list(string.punctuation)
        
        random.shuffle(words)
        random.shuffle(symbols)
        
        # Ajuste si la división no es exacta
        remainder = length_password - (num_letters + num_symbols)
        if remainder > 0:
            num_letters += remainder
        
        password = ''
        
        for _ in range(num_letters):
            password += words.pop()
        
        for _ in range(num_symbols):
            password += symbols.pop()
        
        # Mezcla la contraseña para mayor seguridad
        password_list = list(password)
        random.shuffle(password_list)
        return ''.join(password_list)


# By default, the parser.password_user is 60 length
if data.password_user:
    password = data.password_user
else:
    password = Generator(data.password_user).generate
    print(data)

# Inicializar las variables
string_lowercase = 0
string_uppercase = 0
string_punctuation = 0

# Contar los caracteres
for character in password:
    if character.islower():
        string_lowercase += 1
    elif character.isupper():
        string_uppercase += 1
    else:
        string_punctuation += 1

# Imprimir los resultados
print(
    f"""
(
    ascii lowercase: { string_lowercase }, 
    ascii uppercase: { string_uppercase }, 
    symbols: { string_punctuation }
    length: { len(password) }
)
"""
)
print("Password:", password)
